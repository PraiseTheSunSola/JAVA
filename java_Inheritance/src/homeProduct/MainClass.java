package homeProduct;

public class MainClass {
// 공통적인 내용이 주를 이루는 클래스들은 하나의 클래스로 제어할 수 있다.
	
	public static void main(String[] args) {
		

	
		
		Tv tv = new Tv();
		tv.brand ="삼성";
		tv.power();		
		tv.power();	
		tv.channerlUp();
		
		
		
		Aircon air = new Aircon();
		air.brand = "LG휘센";
		System.out.println(air.brand);
		air.power();
		air.power();
		air.widControl();
		
		System.out.println(" 다형성");
		 
		// tv2 , item은 참조변수이고 부모클래스가 자식 클래스를 사용한게 아니다. 
		House tv2 = new Tv("LG", 1500000);
		tv2.power();  // overridng 하고 있음 그래서 콘솔에서 TV  전원 : true 라고 나옴
		
		House item = new Tv("삼성", 1750000);
		item.power(); // overridng 하고 있음 그래서 콘솔에서 TV  전원 : true 라고 나옴
		
		item = new Aircon("휘센", 1030000);
		
		
		// 다형성 = 하나의 클래스로 여러개 클래스를 제어할 수 있는 것 아래의 코드가 그 예시
		House [] arr = {new Tv(), new Aircon(), new Computer()};
		
		
	}
}


// 클래스 상속 
//  상속 하려면 자식 클래스 이름 뒤에 extends 부모 클래스 이름 
// extends - 확장, 연장...
// Tv extends House -> Tv클래스가 자식이고 House가 부모클래스이다. 
// 부모가 가지고 있는 변수도 자식이 사용할 수 있다.
// 상속을 하는 가장 큰 이유 -> 다형성( 하나의 타입으로 여러개 타입을 사용하는것) => 객체 지향의 꽃 
//.toString() 자바에 내장되어 있는 문자열을 다루기 위해 만들어진 메소드 
// 다형성에 의해 실행되는건 자식들에 데이터를 사용
// 상속을 하게되면 부모 클래스의 인스턴스 변수, 인스턴스메서드, 클래스 변수, 클래스메서드가 사용가능
// 단, 부모클래스의 모든 걸 사용하지는 못하다. (일부)
// 부모 클래스는 자식 클래스의 데이터를  사용하지 못 한다.
// 제어 걸려있는 변수나 메서드는 사용 불가 

// 생성자메서드를 통해 인스턴스변수들의 초기화는 
// 자식클래스가 가지고있는 변수는 자식클래스 생성자메서드에서 초기화
// 부모클래스가 가지고 있는 변수는 부모클래스 생성자 메서드에서 초기화

/*
자바의 제어자 

1. static - 클래스의 정적 변수, 정적 메서드
				- 클래스에서 객체들이 공동으로 사용할 수 있는 변수 메서드
				- 객체에 속하지 않고 클래스에 속한다. 
				- 클래스명.static 변수명 	, 	클래스명.static메서드()

2. abstract - 추상 클래스, 추상 메서드
					  - 미완성의 의미를 가진다. 
					  - 추상클래스는 객체 생성불가
					 
3. final 		  - 변경되지 않는 의미로 사용된다.
					  - 변수 앞에 final을 붙이면 변수 값 변경 불가
					  - 메서드 앞에 final을 붙이면 해당 메서드는 오버라이딩불가 (자식 클래스 쪽에서 변경 불가)
					  - 클래스  앞에 final을 붙이면 상속 불가 ( 자식 클래스에 붙으면 그대로 자식이지만 부모 클래스가 될 순 없음)

*/





// 클래스들의 관계 - 상속 관계
// 상속 관계에 놓여있는 클래스들은 부모 클래스와 자식클래스로 나뉜다.
// 부모클래스의 필드(변수), 메서드를 하위클래스( 자식클래스 )에서 사용가능하다.
// 1. 상속은 재사용을 위해 사용한다. - 클래스들간의 중복코드를 
// 	  하나의 클래스로 통합시켜 사용 
// 2. 상위클래스(부모클래스)의 필드(변수), 메서드를 모두 하위(자식) 클래스
// 	 에서 사용 하지는 못한다. - 제어자에 따라, 패키지에 따라 제한적이다. 
// 3. 하위(자식) 클래스에서 부모를 지칭하는 예약어는 super이다. 

// 결합도가 높다 => 다른 클래스들 간에 연결( 상호작용)이 긴밀하다.